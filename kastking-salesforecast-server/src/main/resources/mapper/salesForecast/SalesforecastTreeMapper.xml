<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kastking.salesforecastTree.mapper.SalesforecastTreeMapper">

    <resultMap type="SalesforecastTree" id="SalesforecastTreeResult">
        <result property="treeId" column="tree_id"/>
        <result property="parentId" column="parent_id"/>
        <result property="treeName" column="tree_name"/>
        <result property="parentName" column="parent_name"/>
    </resultMap>

    <sql id="selectSalesforecastTreeVo">
        select * from (
        select * from (
        select -MIN(salesforcast_info_id) tree_id,left(MAX(period),7) tree_name,0 parent_id from mis_salesforcast_info
        where period='2020-03-01'
        GROUP BY period
        union all
        select MIN(salesforcast_info_id)+10000 tree_id,MAX(channel) tree_name,
        (select -MIN(a.salesforcast_info_id) from mis_salesforcast_info a where a.period=mis_salesforcast_info.period )
        parent_id
        from mis_salesforcast_info
        where period='2020-03-01'
        GROUP BY period,channel

        union all
        select -MIN(salesforcast_info_id)+20000 tree_id,MAX(salesman) tree_name,
        (select MIN(salesforcast_info_id)+10000 from mis_salesforcast_info b where b.period=mis_salesforcast_info.period
        and b.channel=mis_salesforcast_info.channel ) parent_id
        from mis_salesforcast_info
        where period='2020-03-01'
        GROUP BY period,channel,salesman
        union all
        select MIN(salesforcast_info_id) tree_id,left(MAX(forecast_month),7) tree_name,
        (select -MIN(salesforcast_info_id)+20000 from mis_salesforcast_info b where
        b.period=mis_salesforcast_info.period and b.channel=mis_salesforcast_info.channel and
        b.salesman=mis_salesforcast_info.salesman ) parent_id
        from mis_salesforcast_info
        where period='2020-03-01'
        <!--<where>-->
        <!--<if test="username != null and username !=''"> and salesman like concat('%', #{salesman}, '%')</if>-->
        <!--<if test="channel!='GDO'">-->
        <!--<if test="channel != null and channel !=''"> and channel like concat('%', #{channel}, '%')</if>-->
        <!--</if>-->
        <!--<if test="channel=='GDO'">-->
        <!--and ( channel like concat('%', 'SMT', '%')-->
        <!--or channel like concat('%', 'EBAY', '%') )-->
        <!--</if>-->
        <!--</where>-->
        GROUP BY period,channel,salesman,forecast_month
        ) t1 order by tree_name ) t2
    </sql>

    <select id="selectSalesforecastTreeList" parameterType="SalesforecastTree" resultMap="SalesforecastTreeResult">
        <include refid="selectSalesforecastTreeVo"/>
        <where>
            <if test="parentId != null ">and parent_id = #{parentId}</if>
            <if test="treeName != null  and treeName != ''">and tree_name like concat('%', #{treeName}, '%')</if>
        </where>
        order by parent_id
    </select>

    <select id="selectSalesforecastTreeById" parameterType="Long" resultMap="SalesforecastTreeResult">
        select t.tree_id, t.parent_id, t.tree_name, p.tree_name as parent_name
        from mis_salesforecast t
        left join mis_salesforecast p on p.tree_id = t.parent_id
        where t.tree_id = #{treeId}
    </select>

    <insert id="insertSalesforecastTree" parameterType="SalesforecastTree" useGeneratedKeys="true" keyProperty="treeId">
        insert into mis_salesforecast
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="parentId != null ">parent_id,</if>
            <if test="treeName != null  and treeName != ''">tree_name,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="parentId != null ">#{parentId},</if>
            <if test="treeName != null  and treeName != ''">#{treeName},</if>
        </trim>
    </insert>

    <update id="updateSalesforecastTree" parameterType="SalesforecastTree">
        update mis_salesforecast
        <trim prefix="SET" suffixOverrides=",">
            <if test="parentId != null ">parent_id = #{parentId},</if>
            <if test="treeName != null  and treeName != ''">tree_name = #{treeName},</if>
        </trim>
        where tree_id = #{treeId}
    </update>

    <delete id="deleteSalesforecastTreeById" parameterType="Long">
        delete from mis_salesforecast where tree_id = #{treeId}
    </delete>

    <delete id="deleteSalesforecastTreeByIds" parameterType="String">
        delete from mis_salesforecast where tree_id in
        <foreach item="treeId" collection="array" open="(" separator="," close=")">
            #{treeId}
        </foreach>
    </delete>

</mapper>