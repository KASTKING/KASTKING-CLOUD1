package ${packageName}.service.impl;

import java.util.List;
    #if($table.tree)
    import java.util.ArrayList;

    import com.kastking.common.core.domain.Ztree;
    #end
    #foreach ($column in $columns)
        #if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
        import com.kastking.common.utils.DateUtils;
            #break
        #end
    #end
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.kastking.common.core.text.Convert;
import com.kastking.common.utils.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.kastking.common.exception.BusinessException;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl implements I${ClassName}Service {
    private static final Logger log = LoggerFactory.getLogger(${ClassName}ServiceImpl.class);

    @Autowired
    private ${ClassName}Mapper ${className}Mapper;

    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return ${functionName}
     */
    @Override
    public ${ClassName} select${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField}) {
        return ${className}Mapper.select${ClassName}ById(${pkColumn.javaField});
    }

    /**
     * 查询${functionName}列表
     *
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}> select${ClassName}List(${ClassName} ${className}) {
        return ${className}Mapper.select${ClassName}List(${className});
    }

    /**
     * 新增${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
    public int insert${ClassName}(${ClassName} ${className}) {
        #foreach ($column in $columns)
            #if($column.javaField == 'createTime')
                ${className}.setCreateTime(DateUtils.getNowDate());
            #end
        #end
        return ${className}Mapper.insert${ClassName}(${className});
    }

    /**
     * 修改${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
    public int update${ClassName}(${ClassName} ${className}) {
        #foreach ($column in $columns)
            #if($column.javaField == 'updateTime')
                ${className}.setUpdateTime(DateUtils.getNowDate());
            #end
        #end
        return ${className}Mapper.update${ClassName}(${className});
    }

    /**
     * 删除${functionName}对象
     *
     * @param ids 需要删除的数据ID
     * @return 结果
     */
    @Override
    public int delete${ClassName}ByIds(String ids) {
        return ${className}Mapper.delete${ClassName}ByIds(Convert.toStrArray(ids));
    }

    /**
     * 删除${functionName}信息
     *
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return 结果
     */
    @Override
    public int delete${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField}) {
        return ${className}Mapper.delete${ClassName}ById(${pkColumn.javaField});
    }
    #if($table.tree)

        /**
         * 查询${functionName}树列表
         *
         * @return 所有${functionName}信息
         */
        @Override
        public List<Ztree> select${ClassName}Tree() {
            List<${ClassName}> ${className}List = ${className}Mapper.select${ClassName}List(new ${ClassName}());
            List<Ztree> ztrees = new ArrayList<Ztree>();
            for (${ClassName} ${className} :${className}List)
            {
                Ztree ztree = new Ztree();
                #set($TreeCode=$treeCode.substring(0,1).toUpperCase() + ${treeCode.substring(1)})
                #set($TreeParentCode=$treeParentCode.substring(0,1).toUpperCase() + ${treeParentCode.substring(1)})
                #set($TreeName=$treeName.substring(0,1).toUpperCase() + ${treeName.substring(1)})
                ztree.setId(${className}.get${TreeCode}());
                ztree.setpId(${className}.get${TreeParentCode}());
                ztree.setName(${className}.get${TreeName}());
                ztree.setTitle(${className}.get${TreeName}());
                ztrees.add(ztree);
            }
            return ztrees;
        }
    #end

    /**
     * 导入${functionName}数据
     *
     * @param ${className}List ${functionName}数据列表
     * @param isUpdateSupport 是否更新支持，如果已存在，则进行更新数据
     * @param operName 操作用户
     * @return 结果
     */
    public String import${ClassName}(
    List<${ClassName}> ${className}List, Boolean
    isUpdateSupport,
    String operName)

    {
        if (StringUtils.isNull(${className}List) || ${className}List.size() == 0) {
            throw new BusinessException("导入${functionName}数据不能为空！");
        }
        int successNum = 0;
        int failureNum = 0;
        StringBuilder successMsg = new StringBuilder();
        StringBuilder failureMsg = new StringBuilder();
        for (${ClassName} ${className} :${className}List)
        {
            try {
                this.insert${ClassName}(${className});
                successNum++;
                successMsg.append("<br/>" + successNum + "、导入成功");
            } catch (Exception e) {
                failureNum++;
                String msg = "<br/>" + failureNum + "、导入失败：";
                failureMsg.append(msg + e.getMessage());
                log.error(msg, e);
            }
        }
        if (failureNum > 0) {
            failureMsg.insert(0, "很抱歉，导入失败！共 " + failureNum + " 条数据格式不正确，错误如下：");
            throw new BusinessException(failureMsg.toString());
        } else {
            successMsg.insert(0, "恭喜您，数据已全部导入成功！共 " + successNum + " 条，数据如下：");
        }
        return successMsg.toString();
    }
}
